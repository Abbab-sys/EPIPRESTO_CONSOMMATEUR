# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

interface HttpResponseInterface {
    code: Int!
    message: String!
}

type ActivesHours {
    endingHour: String!
    openingHour: String!
}

type AnalyticsResponse implements HttpResponseInterface {
    code: Int!
    message: String!
    topProducts: [ProductVariant!]
    totalOrders: Int
    totalSales: Float
}

type Chat {
    _id: ID!
    messages: [Message!]!
    relatedClient: ClientAccount!
    relatedOrder: Order!
    relatedVendor: Store!
}

type ClientAccount {
    _id: ID!
    adress: String!
    chats: [Chat!]!
    email: String!
    firstName: String!
    lastName: String!
    orders: [Order!]!
    password: String!
    phone: String!
    username: String!
}

type ClientAccountResponse implements HttpResponseInterface {
    clientAccount: ClientAccount
    code: Int!
    message: String!
}

type Disponibility {
    activesHours: [ActivesHours!]!
    day: Day!
}

type HttpResponse implements HttpResponseInterface {
    code: Int!
    message: String!
}

type Message {
    _id: ID!
    date: Date!
    message: String!
    relatedChat: Chat!
    role: Role!
    status: MessageStatus!
}

type Mutation {
    addNewProductToStore(newProduct: ProductInput!, storeId: ID!): HttpResponse!
    addNewVariantToProduct(newVariant: ProductVariantInput!, productId: ID!): HttpResponse!
    addNewVariantsToProduct(newVariants: [ProductVariantInput!]!, productId: ID!): HttpResponse!
    clientSignUp(accountInput: ClientAccountInput): HttpResponse!
    removeProductById(productId: ID!): HttpResponse!
    removeVariantById(productVariantId: ID!): HttpResponse!
    removeVariantsByIds(productVariantsIds: [ID!]!): HttpResponse!
    sendMessageToChat(message: MessageInput!): HttpResponse!
    submitOrder(clientId: ID!, paymentMethod: PaymentMethod!, productsVariantsToOrder: [ProductOrderedInput!]!): HttpResponse!
    synchronizeShopifyStore(shopifyCreds: ShopifyCredentials!): HttpResponse!
    synchronizeWoocommerceStore(woocommerceCreds: WoocommerceCredentials!): HttpResponse!
    updateOrderStatus(newStatus: OrderStatus!, orderId: ID!): HttpResponse!
    updateProduct(fieldsToUpdate: UpdateProduct!, productId: ID!): ProductResponse!
    updateProductVariant(fieldsToUpdate: UpdateProductVariant!, variantId: ID!): ProductVariantResponse!
    updateProductsVariants(variantsToUpdate: [UpdateProductVariant!]!): HttpResponse!
    updateStore(fieldsToUpdate: UpdateStore!, storeId: ID!): StoreResponse!
    updateVendorAccount(fieldsToUpdate: UpdateVendorAccount!, vendorId: ID!): VendorAccountResponse!
    vendorSignUp(accountInput: VendorAccountInput): HttpResponse!
    verifyVendorAccount(token: String!): VendorAccountResponse!
}

type Order {
    _id: ID!
    deliveryFee: Float!
    logs: [OrderLog!]!
    orderNumber: String!
    paymentMethod: PaymentMethod!
    productsVariantsOrdered: [ProductVariantOrdered!]!
    relatedChats: [Chat!]!
    relatedClient: ClientAccount!
    relatedVendors: [Store!]!
    subTotal: Float!
    taxs: Float!
}

type OrderLog {
    status: OrderStatus
    time: Date
}

type OrderResponse implements HttpResponseInterface {
    code: Int!
    message: String!
    order: Order
}

type Product {
    _id: ID!
    brand: String
    imgSrc: String!
    published: Boolean!
    relatedStore: Store!
    tags: [String!]!
    title: String!
    variants: [ProductVariant!]!
}

type ProductResponse implements HttpResponseInterface {
    code: Int!
    message: String!
    product: Product
}

type ProductVariant {
    _id: ID!
    availableForSale: Boolean!
    byWeight: Boolean!
    displayName: String!
    imgSrc: String!
    price: Float!
    relatedProduct: Product!
    sku: String
    stock: Int!
    taxable: Boolean!
    variantTitle: String!
}

type ProductVariantOrdered {
    discount: Float
    quantity: Int!
    relatedProductVariant: ProductVariant!
}

type ProductVariantResponse implements HttpResponseInterface {
    code: Int!
    message: String!
    productVariant: ProductVariant
}

type Query {
    getAnalytics(dateFrom: Date!, dateTo: Date!, idStore: ID!): AnalyticsResponse!
    getOrderById(idOrder: ID!): OrderResponse!
    getProductById(idProduct: ID!): ProductResponse!
    getProductVariantById(idVariant: ID!): ProductVariantResponse!
    getStoreById(idStore: ID!): StoreResponse!
    isClientEmailUsed(email: String!): Boolean!
    isClientUsernameUsed(username: String!): Boolean!
    isVendorEmailUsed(email: String!): Boolean!
    isVendorUsernameUsed(username: String!): Boolean!
    loginClientByEmail(email: String!, password: String!): ClientAccountResponse!
    loginClientByUsername(password: String!, username: String!): ClientAccountResponse!
    loginVendorByEmail(email: String!, password: String!): VendorAccountResponse!
    loginVendorByUsername(password: String!, username: String!): VendorAccountResponse!
}

type Store {
    _id: ID!
    address: String!
    chats: [Chat!]!
    disponibilities: [Disponibility!]!
    isOpen: Boolean!
    name: String!
    orders: [Order!]!
    products(first: Int, offset: Int!, searchText: String): [Product!]!
    relatedVendor: VendorAccount!
}

type StoreResponse implements HttpResponseInterface {
    code: Int!
    message: String!
    store: Store
}

type Subscription {
    messageSent(clientId: ID, storeId: ID): Message
}

type VendorAccount {
    _id: ID!
    email: String!
    password: String!
    phone: String!
    store: Store!
    username: String!
}

type VendorAccountResponse implements HttpResponseInterface {
    code: Int!
    message: String!
    vendorAccount: VendorAccount
}

enum ApiType {
    SHOPIFY
    WOOCOMMERCE
}

enum Day {
    FRIDAY
    MONDAY
    SATURDAY
    SUNDAY
    THURSDAY
    TUESDAY
    WEDNESDAY
}

enum MessageStatus {
    READ
    RECEIVED
    SENT
}

enum OrderStatus {
    CLOSED
    CONFIRMED
    DELIVERED
    IN_DELIVERY
    WAITING_CONFIRMATION
}

enum PaymentMethod {
    AMERICAN_EXPRESS
    APPLE_PAY
    BITCOIN
    CASH
    GOOGLE_PAY
    MASTER_CARD
    PAYPAL
    VISA
}

enum Role {
    ADMIN
    CLIENT
    VENDOR
}

"Date custom scalar type"
scalar Date

input ActivesHoursInput {
    endingHour: String!
    openingHour: String!
}

input ClientAccountInput {
    adress: String!
    email: String!
    firstName: String!
    lastName: String!
    password: String!
    phone: String!
    username: String!
}

input DisponibilityInput {
    activesHours: [ActivesHoursInput!]!
    day: Day!
}

input MessageInput {
    content: String!
    relatedChatID: ID!
    role: Role!
}

input ProductInput {
    brand: String
    description: String
    imgSrc: String!
    published: Boolean!
    tags: [String!]!
    title: String!
    variants: [ProductVariantInput!]!
}

input ProductOrderedInput {
    discount: Float
    quantity: Int!
    relatedProductVariantId: ID!
}

input ProductVariantInput {
    availableForSale: Boolean!
    byWeight: Boolean!
    imgSrc: String!
    price: Float!
    sku: String
    stock: Int!
    taxable: Boolean!
    variantTitle: String!
}

input ShopifyCredentials {
    apiToken: String!
    shopDomain: String!
}

input UpdateProduct {
    brand: String
    imgSrc: String
    published: Boolean
    tags: [String!]
    title: String
}

input UpdateProductVariant {
    availableForSale: Boolean
    byWeight: Boolean
    imgSrc: String
    price: Float
    sku: String
    stock: Int
    taxable: Boolean
    variantId: ID
    variantTitle: String
}

input UpdateStore {
    address: String
    disponibilities: [DisponibilityInput!]
    isOpen: Boolean
    name: String
}

input UpdateVendorAccount {
    email: String
    password: String
    phone: String
    username: String
}

input VendorAccountInput {
    address: String!
    email: String!
    password: String!
    phone: String!
    shopName: String!
    username: String!
}

input WoocommerceCredentials {
    consumerKey: String!
    consumerSecretKey: String!
    shopDomain: String!
}
